# game.py

import random
import time
import logging
from enum import Enum
from typing import List, Dict, Optional, Tuple # Typage plus pr√©cis

# --- Gestion Colorama ---
# Tente d'importer colorama pour am√©liorer l'affichage console.
# Si absent, d√©finit des classes vides pour √©viter les erreurs.
try:
    from colorama import Fore, Style, init
    init(autoreset=True) # Initialise colorama pour fonctionner sur Windows et reset auto
    USE_COLORAMA = True
except ImportError:
    # D√©finition de classes factices si colorama n'est pas install√©
    class Fore: RED = YELLOW = CYAN = GREEN = MAGENTA = "" # type: ignore
    class Style: RESET_ALL = BRIGHT = "" # type: ignore
    USE_COLORAMA = False
    # print("Biblioth√®que 'colorama' non trouv√©e. L'affichage sera sans couleurs.") # √âviter print pendant l'import

# --- Gestion nlp_utils (Import diff√©r√© de l'objet mod√®le) ---
# Indicateurs pour g√©rer l'import et la disponibilit√© du mod√®le NLP.
_nlp_utils_present = False             # True si nlp_utils.py a pu √™tre import√©
_nlp_model_loaded_check_done = False   # True si on a d√©j√† v√©rifi√© si le mod√®le est charg√©
_nlp_model_available_flag = False      # True si le mod√®le spaCy est effectivement charg√© et utilisable

try:
    # Importer SEULEMENT la fonction d'analyse au niveau sup√©rieur.
    # L'import de l'objet 'nlp' lui-m√™me est retard√©.
    from nlp_utils import analyse_phrase_pour_joueurs
    _nlp_utils_present = True
except ImportError:
    # Log l'erreur si possible, sinon l'imprime (le logger n'est peut-√™tre pas encore pr√™t)
    print(f"{Fore.RED}ERREUR CRITIQUE: Le fichier nlp_utils.py est introuvable.{Style.RESET_ALL}")
except Exception as e:
    print(f"{Fore.RED}ERREUR CRITIQUE: Une erreur est survenue lors de l'import de nlp_utils: {e}{Style.RESET_ALL}")

# --- Configuration Logging ---
# Configurer le syst√®me de logging pour afficher les informations de d√©roulement.
# Niveau INFO par d√©faut, peut √™tre mis √† DEBUG pour plus de d√©tails.
LOG_LEVEL = logging.INFO
logging.basicConfig(
    level=LOG_LEVEL,
    format='%(asctime)s - %(levelname)s - [%(filename)s:%(lineno)d] - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S' # Format de date optionnel
)

# --- D√©finition des R√¥les ---
class Role(Enum):
    """√ânum√©ration des r√¥les possibles dans le jeu."""
    VILLAGEOIS = "Villageois"
    LOUP_GAROU = "Loup-Garou"
    VOYANTE = "Voyante"
    SORCIERE = "Sorci√®re"
    # TODO: Ajouter d'autres r√¥les (Chasseur, Cupidon, etc.)

# --- Classe Joueur ---
class Player:
    """
    Repr√©sente un joueur dans la partie avec son √©tat et ses capacit√©s.

    Attributes:
        nom (str): Le nom unique du joueur.
        role (Role | None): Le r√¥le assign√© au joueur.
        est_vivant (bool): Statut du joueur (True si vivant, False sinon).
        vote_pour (Player | None): Joueur pour lequel ce joueur a vot√©.
        potions_vie_restantes (int): Nombre de potions de vie (pour Sorci√®re).
        potions_mort_restantes (int): Nombre de potions de mort (pour Sorci√®re).
        est_protege_cette_nuit (bool): Flag si prot√©g√© par la Sorci√®re cette nuit.
        vient_de_mourir_par_poison (bool): Flag si empoisonn√© par la Sorci√®re cette nuit.
    """
    def __init__(self, nom: str):
        """Initialise un joueur avec son nom."""
        if not nom or not isinstance(nom, str):
            raise ValueError("Le nom du joueur ne peut pas √™tre vide.")
        self.nom: str = nom.strip() # Enlever les espaces superflus
        self.role: Optional[Role] = None
        self.est_vivant: bool = True
        self.vote_pour: Optional[Player] = None
        # Attributs sp√©cifiques initialis√©s
        self.potions_vie_restantes: int = 0
        self.potions_mort_restantes: int = 0
        self.est_protege_cette_nuit: bool = False
        self.vient_de_mourir_par_poison: bool = False

    def __str__(self) -> str:
        """Repr√©sentation textuelle pour l'affichage utilisateur."""
        status = f"{Fore.GREEN}Vivant{Style.RESET_ALL}" if self.est_vivant else f"{Fore.RED}Mort{Style.RESET_ALL}"
        role_str = self.role.value if self.role else "R√¥le Inconnu"
        return f"{Style.BRIGHT}{self.nom}{Style.RESET_ALL} ({role_str} - {status})"

    def __repr__(self) -> str:
        """Repr√©sentation d√©taill√©e pour le d√©bogage."""
        return f"Player(nom='{self.nom}', role={self.role}, est_vivant={self.est_vivant})"

    def recevoir_degats(self, type_mort: str = "inconnue") -> bool:
        """
        Marque le joueur comme mort s'il est vivant et loggue la cause.

        Args:
            type_mort (str): Description de la cause de la mort pour les logs.

        Returns:
            bool: True si le joueur vient de mourir, False s'il √©tait d√©j√† mort.
        """
        if self.est_vivant:
            self.est_vivant = False
            logging.info(f"{self.nom} est mort (raison: {type_mort}).")
            print(f"üíÄ {Style.BRIGHT}{self.nom}{Style.RESET_ALL} a √©t√© √©limin√©(e).")
            # TODO: Ajouter ici la logique pour d'autres effets d√©clench√©s par la mort (ex: Chasseur)
            return True
        else:
            logging.debug(f"Tentative de tuer {self.nom} qui est d√©j√† mort (cause: {type_mort}).")
            return False

    def reset_statuts_nuit(self):
        """R√©initialise les indicateurs de statut utilis√©s pendant la nuit."""
        self.est_protege_cette_nuit = False
        self.vient_de_mourir_par_poison = False


# --- Classe Principale du Jeu ---
class Game:
    """
    Orchestre le d√©roulement complet d'une partie de Loup-Garou.
    Int√®gre la gestion des r√¥les (Voyante, Sorci√®re), l'analyse NLP des messages,
    et une structure pour les phases de jeu.
    """
    # --- Constantes et Configuration ---
    MIN_PLAYERS: int = 3 # Nombre minimum de joueurs requis
    PROFILE_NLP: bool = False # Mettre √† True pour logguer le temps d'analyse NLP

    def __init__(self, noms_joueurs: List[str]):
        """
        Initialise une nouvelle partie avec la liste des noms de joueurs.

        Args:
            noms_joueurs (List[str]): Liste des noms des participants. Les noms doivent √™tre uniques (insensible √† la casse).

        Raises:
            ValueError: Si le nombre de joueurs est insuffisant ou si les noms ne sont pas uniques.
            TypeError: Si noms_joueurs n'est pas une liste de strings.
            RuntimeError: Si l'assignation des r√¥les √©choue.
        """
        if not isinstance(noms_joueurs, list) or not all(isinstance(n, str) for n in noms_joueurs):
             raise TypeError("noms_joueurs doit √™tre une liste de cha√Ænes de caract√®res.")

        if len(noms_joueurs) < self.MIN_PLAYERS:
             raise ValueError(f"Nombre insuffisant de joueurs ({len(noms_joueurs)}). Minimum requis : {self.MIN_PLAYERS}.")

        # V√©rifier l'unicit√© des noms (insensible √† la casse et aux espaces)
        noms_normalises = [n.strip().lower() for n in noms_joueurs]
        if len(set(noms_normalises)) != len(noms_joueurs):
            from collections import Counter # Import localis√© car peu utilis√© ailleurs
            counts = Counter(noms_normalises)
            doublons = [nom for nom, count in counts.items() if count > 1]
            raise ValueError(f"Les noms des joueurs doivent √™tre uniques (insensible √† la casse). Doublon(s) trouv√©(s): {', '.join(doublons)}")

        logging.info(f"Initialisation d'une nouvelle partie avec {len(noms_joueurs)} joueurs : {', '.join(noms_joueurs)}")
        self.joueurs: List[Player] = [Player(nom) for nom in noms_joueurs]
        self.phase: str = "Initialisation" # √âtat actuel du jeu
        self.historique_chat: List[str] = [] # Log des messages sans formatage couleur
        self.votes_du_tour: Dict[Player, int] = {} # Stockage des votes du tour en cours
        self.morts_de_la_nuit: List[Tuple[Player, str]] = [] # Stockage des morts de la nuit pour annonce au matin
        self.jours: int = 0 # Compteur de jours/tours

        # Attribuer les r√¥les d√®s l'initialisation
        self._assigner_roles()

    # --- M√©thodes Priv√©es (Logique Interne) ---

    def _assigner_roles(self):
        """Attribue al√©atoirement les r√¥les aux joueurs selon des r√®gles d√©finies."""
        nb_joueurs = len(self.joueurs)
        roles_disponibles = list(Role) # Copie de tous les r√¥les d√©finis
        roles_a_assigner = []

        # --- R√®gles d'attribution (Exemple √† adapter/am√©liorer) ---
        # R√®gle 1: Nombre de Loups-Garous
        nb_loups = max(1, nb_joueurs // 4) # Environ 1 loup pour 4 joueurs, minimum 1
        if Role.LOUP_GAROU in roles_disponibles:
            roles_a_assigner.extend([Role.LOUP_GAROU] * nb_loups)
            roles_disponibles.remove(Role.LOUP_GAROU)
        else:
            logging.error("Le r√¥le Loup-Garou n'est pas d√©fini dans l'Enum Role ! Impossible d'assigner.")
            raise RuntimeError("Configuration des r√¥les invalide: Loup-Garou manquant.")

        # R√®gle 2: Attribution des r√¥les sp√©ciaux (si assez de joueurs)
        roles_speciaux_prioritaires = [Role.VOYANTE, Role.SORCIERE]
        # TODO: Ajouter d'autres r√¥les sp√©ciaux ici

        for special_role in roles_speciaux_prioritaires:
            if special_role in roles_disponibles and len(roles_a_assigner) < nb_joueurs:
                # Condition suppl√©mentaire possible: ex: assigner Sorci√®re seulement si >= 4 joueurs
                assigner_special = False
                if special_role == Role.SORCIERE and nb_joueurs >= 4: assigner_special = True
                elif special_role == Role.VOYANTE and nb_joueurs >= 3: assigner_special = True
                # Ajouter des conditions pour d'autres r√¥les ici
                # elif special_role == Role.CHASSEUR and nb_joueurs >= 5: assigner_special = True
                elif special_role not in [Role.SORCIERE, Role.VOYANTE]: # R√¥les sans condition de nb joueurs
                    assigner_special = True

                if assigner_special:
                    roles_a_assigner.append(special_role)
                    roles_disponibles.remove(special_role)

        # R√®gle 3: Compl√©ter avec des Villageois
        nb_restant = nb_joueurs - len(roles_a_assigner)
        if nb_restant > 0:
            if Role.VILLAGEOIS in roles_disponibles:
                 roles_a_assigner.extend([Role.VILLAGEOIS] * nb_restant)
                 # roles_disponibles.remove(Role.VILLAGEOIS) # Pas n√©cessaire si on ne l'utilise plus
            else:
                 logging.critical("Le r√¥le Villageois n'est pas d√©fini ou d√©j√† √©puis√©. Impossible de compl√©ter.")
                 raise RuntimeError("Configuration des r√¥les invalide: Villageois manquant ou insuffisant.")

        # V√©rification finale et m√©lange
        if len(roles_a_assigner) != nb_joueurs:
            logging.critical(f"Erreur d'assignation des r√¥les: {len(roles_a_assigner)} r√¥les pour {nb_joueurs} joueurs. Configuration ou logique invalide.")
            raise RuntimeError("√âchec de l'assignation des r√¥les. Nombre incorrect de r√¥les assign√©s.")

        random.shuffle(roles_a_assigner)
        logging.debug(f"R√¥les m√©lang√©s √† assigner: {[r.value for r in roles_a_assigner]}")

        # Assigner aux objets Player et initialiser les attributs sp√©cifiques
        for joueur, role in zip(self.joueurs, roles_a_assigner):
            joueur.role = role
            if role == Role.SORCIERE:
                joueur.potions_vie_restantes = 1
                joueur.potions_mort_restantes = 1
            # TODO: Initialiser d'autres r√¥les ici (ex: munitions du chasseur)
            logging.debug(f"R√¥le assign√© : {joueur.nom} est {joueur.role.value}")

        logging.info("R√¥les assign√©s secr√®tement aux joueurs.")

    def _get_joueur_par_input(self, invite: str, liste_cibles: List[Player], peut_passer: bool = True) -> Optional[Player]:
        """
        Demande √† l'utilisateur (via input) de choisir un joueur dans une liste.

        Args:
            invite (str): Le message √† afficher √† l'utilisateur.
            liste_cibles (List[Player]): La liste des joueurs parmi lesquels choisir.
            peut_passer (bool): Si True, l'option 0 pour annuler/passer est propos√©e.

        Returns:
            Optional[Player]: Le joueur choisi, ou None si l'utilisateur passe/annule ou en cas d'erreur.
        """
        if not liste_cibles:
            print("Il n'y a personne √† cibler.")
            return None

        print(invite)
        for i, p in enumerate(liste_cibles):
            print(f"  {i+1}. {p.nom}") # Affichage simple du nom ici

        prompt_fin = f"(1-{len(liste_cibles)})"
        if peut_passer:
            prompt_fin += ", ou 0 pour passer/annuler"

        while True:
            try:
                choix_str = input(f"Entrez le num√©ro {prompt_fin} > ")
                choix_num = int(choix_str)

                if peut_passer and choix_num == 0:
                    logging.debug("L'utilisateur a choisi de passer/annuler la s√©lection.")
                    return None # L'utilisateur choisit de passer
                elif 1 <= choix_num <= len(liste_cibles):
                    joueur_choisi = liste_cibles[choix_num - 1]
                    logging.debug(f"L'utilisateur a choisi {joueur_choisi.nom} (num√©ro {choix_num}).")
                    return joueur_choisi
                else:
                    # Message d'erreur plus pr√©cis
                    valid_range = f"entre 1 et {len(liste_cibles)}"
                    if peut_passer: valid_range += " (ou 0)"
                    print(f"{Fore.YELLOW}Num√©ro invalide. Veuillez choisir {valid_range}.{Style.RESET_ALL}")
            except ValueError:
                print(f"{Fore.YELLOW}Entr√©e invalide. Veuillez entrer un nombre.{Style.RESET_ALL}")
            except EOFError:
                logging.warning("Fin de l'input (EOF) d√©tect√©e pendant la s√©lection.")
                return None # Consid√©rer comme une annulation
            except Exception as e:
                 # Log l'erreur compl√®te pour le d√©bogage
                 logging.exception(f"Erreur impr√©vue pendant la s√©lection de joueur ({invite})", exc_info=True)
                 return None # S√©curit√©

    def _is_nlp_model_available(self) -> bool:
        """
        V√©rifie (une seule fois par partie) si le mod√®le NLP est charg√© et pr√™t.
        Utilise des flags globaux pour √©viter les v√©rifications r√©p√©t√©es.

        Returns:
            bool: True si le mod√®le NLP est consid√©r√© comme disponible, False sinon.
        """
        global _nlp_model_loaded_check_done, _nlp_model_available_flag
        if not _nlp_utils_present:
             return False # Le fichier nlp_utils lui-m√™me n'est pas l√†

        # Si on n'a pas encore v√©rifi√©, on le fait maintenant
        if not _nlp_model_loaded_check_done:
            try:
                # Tenter d'importer l'objet mod√®le 'nlp' depuis nlp_utils
                from nlp_utils import nlp as nlp_model_object
                _nlp_model_available_flag = nlp_model_object is not None
                logging.info(f"V√©rification du mod√®le NLP: {'Disponible' if _nlp_model_available_flag else 'Non charg√©/Indisponible'}")
            except ImportError:
                 logging.warning("Impossible d'importer 'nlp' depuis nlp_utils lors de la v√©rification.")
                 _nlp_model_available_flag = False
            except Exception as e:
                 logging.exception(f"Erreur lors de la tentative d'import du mod√®le NLP depuis nlp_utils: {e}", exc_info=True)
                 _nlp_model_available_flag = False
            finally:
                 _nlp_model_loaded_check_done = True # Marquer comme v√©rifi√©, m√™me en cas d'erreur

        return _nlp_model_available_flag

    def _resoudre_vote(self):
        """Analyse les votes enregistr√©s dans self.votes_du_tour et √©limine le joueur d√©sign√© (si unique)."""
        if not self.votes_du_tour:
            logging.info("D√©pouillement: Aucun vote enregistr√©.")
            print("\nAucun vote n'a √©t√© enregistr√© ce tour-ci.")
            return

        # Filtrer les votes pour ne compter que les joueurs encore valides (au cas o√π)
        votes_valides = {p: c for p, c in self.votes_du_tour.items() if p and p.est_vivant}
        logging.info(f"R√©sultats du vote (valides): { {j.nom: c for j, c in votes_valides.items() if c > 0} }")

        # Trouver le(s) joueur(s) ayant re√ßu le plus de votes
        max_votes = 0
        joueurs_avec_max_votes = []
        if votes_valides: # S'assurer qu'il y a des votes valides √† analyser
            max_votes = max(votes_valides.values()) if votes_valides else 0
            if max_votes > 0: # Si au moins un vote a √©t√© √©mis
                joueurs_avec_max_votes = [joueur for joueur, compteur in votes_valides.items() if compteur == max_votes]

        # Appliquer le r√©sultat du vote
        if len(joueurs_avec_max_votes) == 1:
            # Un seul joueur est √©limin√©
            elimine = joueurs_avec_max_votes[0]
            print(f"\n{Fore.RED}Le village a d√©cid√© d'√©liminer {Style.BRIGHT}{elimine.nom}{Style.RESET_ALL} avec {max_votes} vote(s).")
            # Appeler recevoir_degats qui g√®re le statut et log/print
            if elimine.recevoir_degats(type_mort="Vote du village"):
                 print(f"Son r√¥le √©tait : {Fore.MAGENTA}{elimine.role.value}{Style.RESET_ALL}") # R√©v√©ler le r√¥le
        elif len(joueurs_avec_max_votes) > 1:
            # √âgalit√©
            noms_egalite = ', '.join([f"{Style.BRIGHT}{j.nom}{Style.RESET_ALL}" for j in joueurs_avec_max_votes])
            print(f"\n{Fore.YELLOW}√âgalit√© ! {noms_egalite} ont re√ßu {max_votes} votes chacun.{Style.RESET_ALL}")
            print("Personne n'est √©limin√© par le village ce tour-ci.")
            logging.info(f"Vote termin√© sur une √©galit√© entre {len(joueurs_avec_max_votes)} joueurs avec {max_votes} votes.")
        else: # max_votes == 0 ou aucun joueur avec votes > 0
            print("\nPersonne n'a re√ßu de vote majoritaire. Le village n'√©limine personne.")
            logging.info("Vote termin√© sans √©limination (aucun vote significatif).")

    def _action_voyante(self, voyante: Player):
        """G√®re l'action nocturne de la Voyante."""
        # Assurer que la voyante est bien vivante avant de la faire agir
        if not voyante.est_vivant:
            logging.warning(f"Tentative d'action pour la voyante {voyante.nom} qui est morte.")
            return

        print(f"\n[{Style.BRIGHT}{voyante.nom}{Style.RESET_ALL} ({Fore.MAGENTA}{voyante.role.value}{Style.RESET_ALL})], c'est votre tour.")
        # Cibles: tous les autres joueurs vivants
        cibles_possibles = [j for j in self.get_joueurs_vivants() if j != voyante]

        # --- Int√©gration UI: Remplacer _get_joueur_par_input par l'interface sp√©cifique ---
        cible = self._get_joueur_par_input("Qui souhaitez-vous sonder ?", cibles_possibles, peut_passer=True)

        if cible:
            role_cible = cible.role.value if cible.role else "Inconnu"
            # Afficher l'information de mani√®re "secr√®te" (ici, en console)
            print(f"   -> {Fore.YELLOW}Vision:{Style.RESET_ALL} {Style.BRIGHT}{cible.nom}{Style.RESET_ALL} est {Fore.MAGENTA}{role_cible}{Style.RESET_ALL}. Gardez cette information !")
            logging.info(f"Nuit : Voyante ({voyante.nom}) a sond√© {cible.nom} (R√¥le: {role_cible}).")
        else:
            print("Vous n'avez sond√© personne cette nuit.")
            logging.info(f"Nuit : Voyante ({voyante.nom}) a choisi de ne sonder personne.")

    def _action_loups_garous(self) -> Optional[Player]:
        """G√®re l'action nocturne des Loups-Garous (choix de la victime)."""
        print(f"{Fore.RED}Les Loups-Garous se concertent...{Style.RESET_ALL}")
        time.sleep(0.5) # Pause pour l'ambiance

        loups_garous_actifs = self.get_joueurs_vivants(role_filtre=Role.LOUP_GAROU)
        if not loups_garous_actifs:
            print("Les Loups-Garous ne sont plus une menace...")
            logging.info("Nuit : Aucun loup-garou actif pour attaquer.")
            return None

        # Cibles potentielles : tous les joueurs vivants qui ne sont pas des loups
        cibles_potentielles = [j for j in self.get_joueurs_vivants() if j.role != Role.LOUP_GAROU]

        if not cibles_potentielles:
             print("Il n'y a plus de proies pour les Loups !")
             logging.info("Nuit : Aucune cible valide (non-loup) pour les loups.")
             return None

        # --- Logique de Choix des Loups ---
        # TODO: Impl√©menter une meilleure logique si plusieurs loups (vote interne, IA, etc.)
        # Pour l'instant, le premier loup actif choisit.
        loup_acteur = loups_garous_actifs[0]

        # --- Int√©gration UI/IA : Remplacer choix par concertation/IA ---
        invite = f"[{Style.BRIGHT}{loup_acteur.nom}{Style.RESET_ALL} ({Fore.RED}{loup_acteur.role.value}{Style.RESET_ALL})], qui attaquez-vous ?"
        # Les loups devraient √™tre oblig√©s de choisir quelqu'un s'il y a des cibles
        victime_choisie = self._get_joueur_par_input(invite, cibles_potentielles, peut_passer=False)

        if victime_choisie:
            print(f"{Fore.RED}Les Loups-Garous ont choisi leur cible...{Style.RESET_ALL}")
            noms_loups = [l.nom for l in loups_garous_actifs]
            logging.info(f"Nuit : Loups ({', '.join(noms_loups)}) ont cibl√© {victime_choisie.nom}")
            return victime_choisie
        else:
            # S'il n'y a pas eu de choix (erreur ou cas impr√©vu)
            print(f"{Fore.YELLOW}Les Loups-Garous n'ont pas pu d√©signer de cible (erreur?).{Style.RESET_ALL}")
            logging.error(f"Nuit : √âchec du choix de cible pour les Loups ({[l.nom for l in loups_garous_actifs]}).")
            return None

    def _action_sorciere(self, sorciere: Player, victime_loups: Optional[Player]):
        """G√®re les actions nocturnes de la Sorci√®re (sauver et/ou empoisonner)."""
        # Assurer que la sorci√®re est vivante
        if not sorciere.est_vivant:
             logging.warning(f"Tentative d'action pour la sorci√®re {sorciere.nom} qui est morte.")
             return

        print(f"\n[{Style.BRIGHT}{sorciere.nom}{Style.RESET_ALL} ({Fore.MAGENTA}{sorciere.role.value}{Style.RESET_ALL})], c'est votre tour.")
        # D√©terminer les actions possibles
        peut_sauver = sorciere.potions_vie_restantes > 0 and victime_loups is not None and victime_loups.est_vivant
        peut_tuer = sorciere.potions_mort_restantes > 0

        if not peut_sauver and not peut_tuer:
            print("Vous n'avez plus de potions.")
            logging.info(f"Nuit : Sorci√®re ({sorciere.nom}) n'a plus de potions.")
            return

        # --- 1. Action de Sauvetage (si possible) ---
        action_sauvetage_faite = False
        if peut_sauver:
            # Assurer que victime_loups est bien d√©fini (contournement pour mypy/linting)
            nom_victime_loups = victime_loups.nom if victime_loups else "Inconnu"
            print(f"Les loups ont attaqu√© {Style.BRIGHT}{nom_victime_loups}{Style.RESET_ALL}.")
            # --- Int√©gration UI: Remplacer input ---
            reponse = input(f"Voulez-vous utiliser votre {Fore.GREEN}potion de vie{Style.RESET_ALL} ({sorciere.potions_vie_restantes} restante) pour sauver {nom_victime_loups} ? (o/n) > ").lower()
            if reponse.startswith('o'):
                if victime_loups: # V√©rification suppl√©mentaire pour mypy
                    victime_loups.est_protege_cette_nuit = True # Marquer comme prot√©g√© pour la r√©solution
                    sorciere.potions_vie_restantes -= 1
                    action_sauvetage_faite = True # Confirmer que l'action a eu lieu
                    print(f"Vous avez utilis√© la potion de vie pour sauver {Style.BRIGHT}{nom_victime_loups}{Style.RESET_ALL}.")
                    logging.info(f"Nuit : Sorci√®re ({sorciere.nom}) a sauv√© {nom_victime_loups}.")
            # Si la r√©ponse n'est pas 'o', on ne fait rien (pas de else n√©cessaire pour la logique)
            if not action_sauvetage_faite:
                 print("Vous n'avez pas utilis√© la potion de vie.")
                 logging.info(f"Nuit : Sorci√®re ({sorciere.nom}) n'a PAS sauv√© {nom_victime_loups}.")

        # --- 2. Action d'Empoisonnement (si possible) ---
        if peut_tuer:
            # --- Int√©gration UI: Remplacer input ---
            reponse = input(f"Voulez-vous utiliser votre {Fore.RED}potion de mort{Style.RESET_ALL} ({sorciere.potions_mort_restantes} restante) sur quelqu'un ? (o/n) > ").lower()
            if reponse.startswith('o'):
                # Cibles : tous les joueurs vivants, sauf la sorci√®re elle-m√™me.
                # On peut tuer qqn qui a √©t√© sauv√©, ou la victime des loups si non sauv√©e.
                cibles_poison = [j for j in self.get_joueurs_vivants() if j != sorciere]

                if not cibles_poison:
                     print("Il n'y a personne d'autre √† empoisonner.")
                else:
                    # --- Int√©gration UI: Remplacer _get_joueur_par_input ---
                    cible_poison = self._get_joueur_par_input("Qui souhaitez-vous empoisonner ?", cibles_poison, peut_passer=True)

                    if cible_poison:
                        cible_poison.vient_de_mourir_par_poison = True # Marquer pour la r√©solution
                        sorciere.potions_mort_restantes -= 1
                        print(f"Vous avez utilis√© la potion de mort sur {Style.BRIGHT}{cible_poison.nom}{Style.RESET_ALL}.")
                        logging.info(f"Nuit : Sorci√®re ({sorciere.nom}) a empoisonn√© {cible_poison.nom}.")
                    else:
                        print("Vous n'avez empoisonn√© personne.")
                        logging.info(f"Nuit : Sorci√®re ({sorciere.nom}) a choisi de ne pas empoisonner.")

    def _resoudre_morts_nuit(self, victime_choisie_par_loups: Optional[Player]):
        """Applique les morts d√©cid√©es pendant la nuit en tenant compte des protections."""
        self.morts_de_la_nuit = [] # R√©initialiser la liste des morts pour l'annonce

        # 1. R√©soudre la mort par les Loups
        victime_loup_effective: Optional[Player] = None
        raison_mort_loup = "attaqu√©(e) par les Loups-Garous"
        if victime_choisie_par_loups and victime_choisie_par_loups.est_vivant:
            if victime_choisie_par_loups.est_protege_cette_nuit:
                logging.info(f"Nuit : {victime_choisie_par_loups.nom} √©tait cibl√©(e) par les loups mais a √©t√© prot√©g√©(e).")
            else:
                victime_loup_effective = victime_choisie_par_loups

        # 2. R√©soudre la mort par la Potion de la Sorci√®re
        victime_poison_effective: Optional[Player] = None
        raison_mort_poison = "empoisonn√©(e) par la Sorci√®re"
        # It√©rer sur une copie de la liste des joueurs au cas o√π la liste change pendant l'it√©ration (peu probable ici)
        for joueur in list(self.joueurs):
            if joueur.vient_de_mourir_par_poison and joueur.est_vivant:
                 victime_poison_effective = joueur
                 break # On suppose qu'une seule potion de mort est utilis√©e par nuit

        # 3. Appliquer les morts et remplir la liste pour l'annonce
        # G√©rer le cas o√π la m√™me personne est tu√©e par les deux (priorit√© √† la mort)
        if victime_loup_effective and victime_loup_effective == victime_poison_effective:
             if victime_loup_effective.recevoir_degats(type_mort="Attaque Loup-Garou et Potion Sorci√®re"):
                 self.morts_de_la_nuit.append((victime_loup_effective, f"{raison_mort_loup} ET {raison_mort_poison}"))
        else:
            # Mort par Loup seulement (si diff√©rent du poison ou si pas de poison)
            if victime_loup_effective and victime_loup_effective.recevoir_degats(type_mort="Attaque Loup-Garou"):
                self.morts_de_la_nuit.append((victime_loup_effective, raison_mort_loup))
            # Mort par Poison seulement (si diff√©rent du loup ou si pas de victime loup)
            if victime_poison_effective and victime_poison_effective.recevoir_degats(type_mort="Potion Sorci√®re"):
                 self.morts_de_la_nuit.append((victime_poison_effective, raison_mort_poison))

        # 4. Annoncer les morts au d√©but du jour
        print("-" * 20) # S√©parateur visuel
        if not self.morts_de_la_nuit:
            print("Personne n'est mort cette nuit. Le village semble calme...")
            logging.info("Nuit: Aucune mort effective.")
        else:
            print("Ce matin, le village d√©couvre le(s) corps de :")
            for victime, cause in self.morts_de_la_nuit:
                 # recevoir_degats a d√©j√† affich√© la mort individuelle
                 print(f" - {Style.BRIGHT}{victime.nom}{Style.RESET_ALL}, {cause}.")
                 print(f"   Son r√¥le √©tait : {Fore.MAGENTA}{victime.role.value}{Style.RESET_ALL}")
                 logging.info(f"Nuit: {victime.nom} est mort(e) ({cause}). R√¥le: {victime.role.value}")
                 # TODO: Ajouter ici la logique pour d'autres effets (ex: Chasseur peut tirer)
                 # if victime.role == Role.CHASSEUR: self._action_chasseur_post_mortem(victime)


    # --- M√©thodes Publiques (Contr√¥le du Jeu et Phases) ---

    def get_joueurs_vivants(self, role_filtre: Optional[Role] = None) -> List[Player]:
        """Retourne la liste des objets Player vivants, optionnellement filtr√©e par r√¥le."""
        vivants = [j for j in self.joueurs if j.est_vivant]
        if role_filtre:
            # Filtrer par r√¥le si demand√©
            return [j for j in vivants if j.role == role_filtre]
        return vivants

    def get_player_by_name(self, nom: str, vivants_seulement: bool = True) -> Optional[Player]:
        """
        Trouve un objet Player par son nom (insensible √† la casse et aux espaces).

        Args:
            nom (str): Le nom √† rechercher.
            vivants_seulement (bool): Si True, ne cherche que parmi les joueurs vivants.

        Returns:
            Optional[Player]: Le joueur trouv√© ou None.
        """
        if not nom or not isinstance(nom, str): return None # Entr√©e invalide
        nom_cherche = nom.strip().lower()
        joueurs_a_chercher = self.get_joueurs_vivants() if vivants_seulement else self.joueurs
        for joueur in joueurs_a_chercher:
            if joueur.nom.strip().lower() == nom_cherche:
                return joueur
        return None

    def traiter_message_joueur(self, nom_joueur_auteur: str, message: str):
        """
        Traite un message re√ßu, l'affiche, et utilise NLP (si disponible) pour d√©tecter les mentions.
        Valide les mentions contre les joueurs vivants.
        """
        if not message or not isinstance(message, str):
            logging.debug("Message vide ou invalide re√ßu, ignor√©.")
            return

        auteur = self.get_player_by_name(nom_joueur_auteur, vivants_seulement=True) # L'auteur doit √™tre vivant
        if not auteur:
            logging.warning(f"Message re√ßu d'un joueur inconnu ou mort : {nom_joueur_auteur}")
            return

        # 1. Afficher le message (avec couleur si possible)
        log_message = f"[{Style.BRIGHT}{auteur.nom}{Style.RESET_ALL}]: {message}"
        self.historique_chat.append(f"[{auteur.nom}]: {message}") # Historique sans couleurs
        print(log_message)

        # 2. Analyser avec NLP (si disponible)
        joueurs_valides_mentionnes: List[Player] = []
        if self._is_nlp_model_available():
            try:
                 # La fonction a √©t√© import√©e au niveau sup√©rieur si _nlp_utils_present est True
                 noms_detectes_nlp = analyse_phrase_pour_joueurs(message, perform_timing=self.PROFILE_NLP)

                 if noms_detectes_nlp:
                     logging.debug(f"NLP a d√©tect√© les mentions potentielles: {noms_detectes_nlp} dans le message de {auteur.nom}")
                     # 3. Valider les noms d√©tect√©s contre les joueurs vivants (excluant l'auteur)
                     for nom_detecte in noms_detectes_nlp:
                         joueur_valide = self.get_player_by_name(nom_detecte, vivants_seulement=True)
                         # V√©rifier existence, statut vivant, et que ce n'est pas l'auteur lui-m√™me
                         if joueur_valide and joueur_valide != auteur:
                             # √âviter les doublons si un nom est mentionn√© plusieurs fois
                             if joueur_valide not in joueurs_valides_mentionnes:
                                 joueurs_valides_mentionnes.append(joueur_valide)

                     if joueurs_valides_mentionnes:
                         noms_str = ', '.join([f"{Style.BRIGHT}{jv.nom}{Style.RESET_ALL}" for jv in joueurs_valides_mentionnes])
                         info_msg = f"   ({Fore.CYAN}INFO:{Style.RESET_ALL} {auteur.nom} mentionne {noms_str})"
                         print(info_msg)
                         logging.info(f"INFO JEU (NLP): {auteur.nom} parle de joueur(s) valide(s) : {[jv.nom for jv in joueurs_valides_mentionnes]}")
                         # TODO: Que faire avec cette information ? (IA, historique, etc.)

            except NameError: # S√©curit√© si analyse_phrase_pour_joueurs n'a pas √©t√© import√©e
                 logging.error("Fonction NLP 'analyse_phrase_pour_joueurs' non trouv√©e, analyse annul√©e.")
            except Exception as e:
                 # Capturer les erreurs sp√©cifiques √† l'analyse NLP
                 logging.exception(f"Erreur pendant l'analyse NLP dans traiter_message_joueur pour '{message[:50]}...'", exc_info=True)
        # else: # Pas besoin de logguer ici si le mod√®le n'est pas dispo, c'est d√©j√† signal√©

    def lancer_phase_discussion(self):
        """Simule une phase de discussion o√π les joueurs parlent √† tour de r√¥le."""
        # Incr√©menter le jour ici, car la discussion marque le d√©but du jour
        self.jours += 1
        self.phase = "Discussion"
        print(f"\n{Fore.YELLOW}--- JOUR {self.jours} : Phase de Discussion ---{Style.RESET_ALL}")
        print("Les villageois se r√©veillent (sauf les morts). Discutez pour trouver les Loups-Garous !")

        joueurs_a_parler = self.get_joueurs_vivants()
        if not joueurs_a_parler:
            logging.warning("Phase Discussion: Aucun joueur vivant pour parler.")
            return # Devrait √™tre g√©r√© par check_game_over avant d'arriver ici

        # Ordre de parole al√©atoire pour plus de dynamisme
        random.shuffle(joueurs_a_parler)
        logging.debug(f"Ordre de parole pour la discussion Jour {self.jours}: {[p.nom for p in joueurs_a_parler]}")

        for joueur_actuel in joueurs_a_parler:
            try:
                # --- Point d'int√©gration UI : Remplacer input() par la m√©thode de l'interface ---
                message = input(f"[{Style.BRIGHT}{joueur_actuel.nom}{Style.RESET_ALL}] > ")
                self.traiter_message_joueur(joueur_actuel.nom, message)
            except EOFError:
                logging.warning("Fin de l'input (EOF) d√©tect√©e pendant la discussion.")
                break # Sortir de la boucle de discussion
            except Exception as e:
                 logging.exception(f"Erreur pendant le tour de parole de {joueur_actuel.nom}", exc_info=True)

            time.sleep(0.1) # Petite pause artificielle entre les tours de parole

        logging.info("Fin de la phase de discussion du jour %d.", self.jours)

    def lancer_phase_vote(self):
        """G√®re la phase de vote du village pour √©liminer un joueur."""
        self.phase = "Vote"
        print(f"\n{Fore.YELLOW}--- Phase de Vote ---{Style.RESET_ALL}")
        print("Le moment est venu de voter pour √©liminer un suspect.")

        joueurs_votants = self.get_joueurs_vivants()
        # Dans la version simple, on peut voter pour n'importe qui de vivant
        joueurs_eligibles = self.get_joueurs_vivants()

        if not joueurs_votants:
            logging.info("Phase Vote: Aucun joueur vivant pour voter.")
            print("Il n'y a plus personne pour voter.")
            return

        # R√©initialiser les votes du tour pr√©c√©dent
        self.votes_du_tour = {j: 0 for j in joueurs_eligibles} # Initialiser avec 0 vote pour chaque √©ligible
        for j in joueurs_votants: j.vote_pour = None # R√©initialiser le choix de vote du joueur

        print(f"Joueurs √©ligibles au vote : {Fore.MAGENTA}{', '.join([j.nom for j in joueurs_eligibles])}{Style.RESET_ALL}")

        # Collecter les votes de chaque joueur vivant
        for votant in joueurs_votants:
            # --- Point d'int√©gration UI : Remplacer input() par la m√©thode de l'interface ---
            invite = f"[{Style.BRIGHT}{votant.nom}{Style.RESET_ALL}], pour qui votez-vous ?"
            # Utiliser la m√©thode helper pour obtenir le choix du joueur
            cible_votee = self._get_joueur_par_input(invite, joueurs_eligibles, peut_passer=True) # Permettre de passer/annuler

            if cible_votee:
                # Enregistrer le vote si une cible valide est choisie
                votant.vote_pour = cible_votee
                # Incr√©menter le compteur pour le joueur cibl√©
                self.votes_du_tour[cible_votee] = self.votes_du_tour.get(cible_votee, 0) + 1
                print(f"   {votant.nom} a vot√© pour {Style.BRIGHT}{cible_votee.nom}{Style.RESET_ALL}")
                logging.debug(f"Vote enregistr√© : {votant.nom} -> {cible_votee.nom}")
            else:
                # L'utilisateur a choisi 0 ou une erreur s'est produite dans _get_joueur_par_input
                print(f"   {votant.nom} n'a pas vot√© ou a annul√©.")
                logging.debug(f"Vote non enregistr√© ou annul√© pour : {votant.nom}")

        # Une fois tous les votes collect√©s, analyser le r√©sultat
        self._resoudre_vote()

    def lancer_phase_nuit(self):
        """Simule les actions des r√¥les nocturnes (Voyante, Loups, Sorci√®re)."""
        self.phase = "Nuit"
        print(f"\n{Fore.CYAN}--- NUIT {self.jours} ---{Style.RESET_ALL}")
        print("Le village s'endort...")
        time.sleep(1) # Pause dramatique

        # R√©initialiser les statuts de nuit et la liste des morts pr√©vues
        self.morts_de_la_nuit = []
        for p in self.joueurs: p.reset_statuts_nuit()

        # --- D√©roulement des Actions Nocturnes (Ordre Important!) ---

        # 1. Action Voyante (si elle existe et est vivante)
        voyantes = self.get_joueurs_vivants(role_filtre=Role.VOYANTE)
        if voyantes:
            self._action_voyante(voyantes[0]) # On suppose une seule voyante
            time.sleep(0.5)

        # 2. Action Loups-Garous (choix de la victime)
        victime_choisie_par_loups: Optional[Player] = self._action_loups_garous()
        time.sleep(1)

        # 3. Action Sorci√®re (si elle existe et est vivante)
        sorcieres = self.get_joueurs_vivants(role_filtre=Role.SORCIERE)
        if sorcieres:
             self._action_sorciere(sorcieres[0], victime_choisie_par_loups) # On suppose une seule sorci√®re
             time.sleep(0.5)

        # TODO: Ajouter les actions d'autres r√¥les nocturnes ici

        # 4. R√©solution des morts de la nuit
        self._resoudre_morts_nuit(victime_choisie_par_loups)

        print(f"{Fore.YELLOW}Le jour se l√®ve...{Style.RESET_ALL}")


    def verifier_fin_partie(self) -> bool:
        """
        V√©rifie si une condition de victoire/fin de partie est atteinte.

        Returns:
            bool: True si la partie est termin√©e, False sinon.
        """
        loups_vivants = self.get_joueurs_vivants(role_filtre=Role.LOUP_GAROU)
        # Consid√©rer tous les non-loups comme "camp adverse" pour la condition simple
        non_loups_vivants = [j for j in self.get_joueurs_vivants() if j.role != Role.LOUP_GAROU]

        # --- Conditions de fin de partie ---
        # TODO: Ajouter des conditions pour r√¥les sp√©ciaux (Amoureux, Flutiste, etc.)
        victoire_village = False
        victoire_loups = False
        raison_fin = ""

        if not loups_vivants:
            # Plus de loups : les villageois (et r√¥les alli√©s) gagnent
            victoire_village = True
            raison_fin = "Tous les Loups-Garous ont √©t√© √©limin√©s."
        elif not non_loups_vivants:
            # Plus de non-loups : les loups gagnent
            victoire_loups = True
            raison_fin = "Les Loups-Garous ont d√©vor√© tous les innocents."
        elif len(loups_vivants) >= len(non_loups_vivants):
            # Les loups sont aussi nombreux ou plus nombreux que les autres : ils gagnent
            victoire_loups = True
            raison_fin = "Les Loups-Garous sont majoritaires et contr√¥lent le village."

        # Si une condition de fin est remplie
        if victoire_village or victoire_loups:
            self.phase = "Terminee" # Mettre √† jour l'√©tat du jeu
            print("-" * 30)
            if victoire_village:
                print(f"\n{Fore.GREEN}üèÜ VICTOIRE DES VILLAGEOIS !{Style.RESET_ALL}")
            elif victoire_loups:
                print(f"\n{Fore.RED}üê∫ VICTOIRE DES LOUPS-GAROUS !{Style.RESET_ALL}")
            print(raison_fin)
            logging.info(f"Fin de partie : Victoire {'Villageois' if victoire_village else 'Loups-Garous'}. Raison: {raison_fin}")
            return True # Indiquer que la partie est finie

        # La partie continue
        return False

    def lancer_partie(self):
        """Boucle principale qui orchestre les tours de jeu jusqu'√† la fin."""
        logging.info("Lancement de la boucle principale du jeu.")
        print(f"\n{Fore.MAGENTA}=== Bienvenue √† Thiercelieux (Version Console) ==={Style.RESET_ALL}")
        print(f"Joueurs ({len(self.joueurs)}): {', '.join([p.nom for p in self.joueurs])}")

        # R√©v√©lation "secr√®te" des r√¥les (pour le mode console)
        print(f"\n{Fore.YELLOW}--- R√©v√©lation secr√®te des r√¥les ---{Style.RESET_ALL}")
        for joueur in self.joueurs:
            # --- Int√©gration UI: Envoyer via canal priv√© ---
            print(f"[{Style.BRIGHT}{joueur.nom}{Style.RESET_ALL}] Votre r√¥le est : {Fore.MAGENTA}{joueur.role.value if joueur.role else 'ERREUR'}{Style.RESET_ALL}")
        print("-" * 30)
        time.sleep(1) # Laisser le temps de lire

        # Boucle principale des tours
        try:
            while self.phase != "Terminee":
                logging.debug(f"D√©but du tour {self.jours + 1}. Phase actuelle: {self.phase}")

                # --- D√©but du Tour (Jour) ---
                if self.jours == 0:
                     # Premier tour: pas de morts la nuit pr√©c√©dente, on passe direct au vote
                     print("\nPremier jour. Personne n'est mort cette nuit (la partie commence).")
                     self.jours = 1 # Initialiser le compteur de jours pour la suite
                else:
                     # Tours suivants: commencer par la discussion
                     self.lancer_phase_discussion()
                     if self.verifier_fin_partie(): break # V√©rifier apr√®s la discussion

                # --- Phase de Vote ---
                # V√©rifier s'il reste assez de joueurs pour voter
                if len(self.get_joueurs_vivants()) >= 2:
                    self.lancer_phase_vote()
                    if self.verifier_fin_partie(): break # V√©rifier apr√®s le vote/√©limination
                else:
                     logging.info("Moins de 2 joueurs vivants, saut de la phase de vote.")


                # --- Phase de Nuit ---
                # V√©rifier s'il y a des actions de nuit √† faire (au moins un loup ou un r√¥le sp√©cial nocturne)
                if any(p.role in [Role.LOUP_GAROU, Role.VOYANTE, Role.SORCIERE] for p in self.get_joueurs_vivants()):
                    self.lancer_phase_nuit()
                    if self.verifier_fin_partie(): break # V√©rifier apr√®s les actions de nuit
                else:
                     logging.info("Aucun r√¥le nocturne actif, saut de la phase de nuit.")
                     print("\nLa nuit est √©trangement calme... Aucun r√¥le sp√©cial nocturne ou loup n'est actif.")
                     # Il faut quand m√™me passer au jour suivant si la partie n'est pas finie
                     # Si on saute la nuit, on doit incr√©menter le jour manuellement ici ?
                     # Normalement, lancer_phase_discussion l'incr√©mente. V√©rifions.

        except Exception as e:
             # Capturer une erreur inattendue pendant la boucle de jeu
             logging.exception("Erreur inattendue pendant la boucle de jeu principale.", exc_info=True)
             print(f"\n{Fore.RED}Une erreur est survenue pendant le jeu: {e}{Style.RESET_ALL}")
             self.phase = "Terminee" # Forcer la fin en cas d'erreur grave


        # --- Fin de la Partie ---
        print(f"\n{Fore.MAGENTA}=== Partie Termin√©e ==={Style.RESET_ALL}")
        print("√âtat final des joueurs :")
        # Utiliser la repr√©sentation __str__ de Player qui inclut les couleurs
        # Trier par nom pour un affichage coh√©rent
        for joueur in sorted(self.joueurs, key=lambda p: p.nom):
            print(f"- {joueur}") # __str__ g√®re l'affichage r√¥le/statut
        logging.info("Affichage de l'√©tat final des joueurs.")


# --- Point d'Entr√©e Principal du Script ---
if __name__ == "__main__":
    # --- V√©rification Explicite du Mod√®le NLP au Lancement ---
    nlp_ready_message_shown = False
    if not _nlp_utils_present:
        print(f"\n{Fore.YELLOW}INFO:{Style.RESET_ALL} Fichier nlp_utils.py introuvable. Analyse NLP d√©sactiv√©e.")
        nlp_ready_message_shown = True
    else:
        try:
            # Tenter d'importer l'objet 'nlp' juste pour v√©rifier son √©tat pour l'utilisateur
            from nlp_utils import nlp as nlp_check_main, NOM_MODELE_SPACY
            if nlp_check_main is not None:
                 print(f"{Fore.GREEN}INFO:{Style.RESET_ALL} Mod√®le spaCy '{NOM_MODELE_SPACY}' charg√©. Analyse NLP activ√©e.")
                 nlp_ready_message_shown = True
            else:
                 # Le fichier existe mais le mod√®le n'a pas charg√© (erreur loggu√©e dans nlp_utils)
                 print(f"\n{Fore.YELLOW}INFO:{Style.RESET_ALL} Mod√®le spaCy ('{NOM_MODELE_SPACY}') non charg√© (voir logs). Analyse NLP d√©sactiv√©e.")
                 print(f"   Pour l'activer, v√©rifiez l'installation et ex√©cutez: python -m spacy download {NOM_MODELE_SPACY}")
                 nlp_ready_message_shown = True
        except ImportError:
             print(f"\n{Fore.YELLOW}INFO:{Style.RESET_ALL} Impossible d'importer depuis nlp_utils. Analyse NLP d√©sactiv√©e.")
             nlp_ready_message_shown = True
        except Exception as e:
             print(f"\n{Fore.YELLOW}INFO:{Style.RESET_ALL} Erreur lors de la v√©rification du mod√®le NLP: {e}. Analyse NLP d√©sactiv√©e.")
             nlp_ready_message_shown = True

    # --- Configuration et Lancement ---
    # TODO: Remplacer par une m√©thode pour obtenir les noms (arguments, interface, etc.)
    noms_des_joueurs_partie = ["Alice", "Bob", "Charlie", "David", "Eve", "Frank"] # Exemple

    try:
        # Cr√©er l'instance du jeu
        jeu_en_cours = Game(noms_des_joueurs_partie)
        # Lancer la boucle principale du jeu
        jeu_en_cours.lancer_partie()

    except ValueError as ve:
        # Erreurs attendues lors de l'initialisation (pas assez de joueurs, doublons)
        print(f"\n{Fore.RED}Erreur de Configuration: {ve}{Style.RESET_ALL}")
        logging.error(f"Erreur de configuration de la partie: {ve}")
    except KeyboardInterrupt:
         # Permettre √† l'utilisateur d'arr√™ter proprement avec Ctrl+C
         print("\nPartie interrompue par l'utilisateur (Ctrl+C).")
         logging.info("Partie interrompue par KeyboardInterrupt.")
    except Exception as e:
        # Capturer toutes les autres erreurs inattendues
        logging.exception("Une erreur CRITIQUE et non g√©r√©e est survenue pendant l'ex√©cution du jeu!", exc_info=True)
        print(f"\n{Fore.RED}ERREUR CRITIQUE INATTENDUE: {e}{Style.RESET_ALL}")
        print("Veuillez consulter les logs pour un rapport d'erreur d√©taill√©.")